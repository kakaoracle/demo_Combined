# 用properties不用yaml,因为层次太深了
server.port=888
mybatis-plus.mapper-locations=classpath:mapper/*.xml

logging.level.com.kaka.mapper.CourseMapper = debug
spring.shardingsphere.props.sql.show=true

# 分库
spring.shardingsphere.datasource.names=coursedb0


spring.shardingsphere.datasource.coursedb0.type=com.zaxxer.hikari.HikariDataSource
spring.shardingsphere.datasource.coursedb0.driver-class-name=com.mysql.cj.jdbc.Driver
spring.shardingsphere.datasource.coursedb0.jdbc-url=jdbc:mysql://localhost:3306/coursedb?kuseSSL=false&serverTimezone=GMT
spring.shardingsphere.datasource.coursedb0.username=root
spring.shardingsphere.datasource.coursedb0.password=root


# 分表,逻辑表为course,实体物理表为course_1与course_2
# 如果已经分库,可以配置库表组合,例如: coursedb$->{0..1}.course_${0..2}
# 注意此处的库名为逻辑名非物理库名
spring.shardingsphere.sharding.tables.course.actualDataNodes=coursedb0.course_${1..2}

# 使用行表达式，根据分片键user_id进行分库（所有表分库默认的算法）
#spring.shardingsphere.sharding.default-database-strategy.inline.sharding-column=user_id
#spring.shardingsphere.sharding.default-database-strategy.inline.algorithm-expression=sharding$->{user_id % 2}


# 指定表主键生成策略(按照雪花算法)
spring.shardingsphere.sharding.tables.course.key-generator.column= cid
spring.shardingsphere.sharding.tables.course.key-generator.type= SNOWFLAKE

#分库策略
# spring.shardingsphere.sharding.tables.course.database-strategy.inline.sharding-column=cid
# spring.shardingsphere.sharding.tables.course.database-strategy.inline.algorithm-expression=course$->{cid % 3}
## 分片策略：name字段,inline策略是不支持范围查询的,可以用其它策略比如standard或者complex等
spring.shardingsphere.sharding.tables.course.tableStrategy.inline.sharding-column=cid
spring.shardingsphere.sharding.tables.course.tableStrategy.inline.algorithm-expression=course_$->{cid % 2 +1}